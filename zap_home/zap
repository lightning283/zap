#!/bin/python
import os
import sys
try:
    from git import *
except ImportError:
    print("Install git..")
from assets.utils import Loader , platform , user
from time import sleep
import shutil
try:
    pkg  = sys.argv[2]
except IndexError:
    pass
if platform == "linux":
    home = f"/home/{user}/zap"
elif platform == "android":
    home = "/system/zap"
try:
    if sys.argv[1] == "-i":
        with Loader("Cloning repo"):
            try:
                shutil.rmtree(f"{home}/packages/{pkg}")
            except FileNotFoundError:
                pass
            try:    
                Repo.clone_from("https://github.com/LIGHTNING283/zap-packages.git", f"{home}/packages/{pkg}", single_branch=True, b=pkg)
                os.chdir(f"{home}/packages/{pkg}/")
                if os.path.isfile(f"{home}/packages/{pkg}/install.sh"):
                    os.system(f"cd {home}/packages/{pkg}/ && bash install.sh")
                else:
                    print("Error: Install Script Not Found..")
                if os.path.isfile(f"{home}/packages/{pkg}/requirements.txt"):
                    with Loader("Resolving Dependencies"):
                        os.chdir(f"{home}/packages/{pkg}/")
                        os.system("pip install -qr requirements.txt")
                else:
                    print("No Dependencies Needed..")
            except GitCommandError or FileNotFoundError:
                print("\nPackage not found , try searching the package name again with zap -s or update pkgs with zap -u..")

    elif sys.argv[1] == "-r":
        with Loader("Checking Uninstall Scripts"):
            sleep(2)
            if os.path.isfile(f"{home}/packages/{pkg}/uninstall.sh"):
                os.system(f"bash {home}/packages/{pkg}/uninstall.sh")
                shutil.rmtree(f"{home}/packages/{pkg}")
    elif sys.argv[1] == "-u":
        with Loader("Cloning Repo"):
            Repo.clone_from("https://github.com/LIGHTNING283/zap-packages.git", f"{home}/pkgs", single_branch=True, b='pkgs')
        os.chdir(home)
        try:
            os.remove("pkgs.md")
        except FileNotFoundError:
            pass
        shutil.copy2( rf"{home}/pkgs/pkgs.md", rf"{home}/")
        shutil.rmtree(f"{home}/pkgs")
        print("Package update Done..")

    elif sys.argv[1] == "-s":
        with open(f'{home}/pkgs.md', 'r') as searchfile:
            for line in searchfile:
                if pkg in line:
                    print (line , end="")
except PermissionError:
    print("Run As Root Or As A Admin..")
